package main

import (
	"fmt"
	"os"
)

const (
	TEST_DIRECTORY = "testing_files"
)

var INDENT string = "  "
var RESULT string = "type autoGenerated struct {\n"

func main() {
	//fmt.Printf("Hello,world!\n")
	//file, err := os.Open(TEST_DIRECTORY + "/" + "one.json")
	//if err != nil {
	//	fmt.Println("err : ", err)
	//	os.Exit(1)
	//}

	fmt.Println("---------------------------")
	//fileContent, err := os.ReadFile(TEST_DIRECTORY + "/" + "step2/invalid_1.json")
	//if err != nil {
	//	fmt.Println("err : ", err)
	//	os.Exit(1)
	//}
	//
	//tokens, err := Tokenize(string(fileContent))
	//if err != nil {
	//	fmt.Println("err : ", err)
	//	os.Exit(1)
	//}
	//for _, tr := range tokens {
	//	for _, t := range tr {
	//		fmt.Printf("%v  ", t)
	//	}
	//	fmt.Println()
	//}

	inputs := [][]Token{
		{{Type: LEFT_SQUARE_BRACE, Value: "["}, {Type: NUMBER, Value: "10"}, {Type: NUMBER, Value: "12"}},
	}
	for _, inp := range inputs {
		TYPE, err := getValueType(inp)
		if err != nil {
			fmt.Println("error : ", err)
			os.Exit(1)
		}
		fmt.Println("The resultant type : ", TYPE)
	}
	fmt.Println("---------------------------")
	//var emptyInterface interface{}
	//decoder := json.NewDecoder(file)
	//err = decoder.Decode(&emptyInterface)
	//
	//if err != nil {
	//	fmt.Println("err : ", err)
	//	os.Exit(1)
	//}
	//fmt.Println("Interface -> ", emptyInterface)
}
